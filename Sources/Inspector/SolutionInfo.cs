using Inspector.Analyzers;
using Microsoft.Build.Construction;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MSBuild = Microsoft.Build.Evaluation;

namespace Inspector
{
    public class SolutionInfo
    {        
        private const string compiled = "Compile";
        private const string autoGenerated = "AutoGen";
        private readonly ICollection<ICodeAnalyzer> analyzers = new List<ICodeAnalyzer>();

        public SolutionInfo()
        {

        }

        public void AddCodeAnalyzer(ICodeAnalyzer analyzer)
        {
            analyzers.Add(analyzer);
        }

        public IEnumerable<SourceFile> GetSourceFiles(string solutionFile)
        {
            var x = SolutionFile.Parse(solutionFile);

            return x.ProjectsInOrder.ToList().SelectMany(project =>
            {
                var p = new MSBuild.Project(project.AbsolutePath);
                return p.Items
                    .Where(i => i.ItemType == compiled && !i.HasMetadata(autoGenerated))
                    .Select(i => i.EvaluatedInclude)
                        .Select(srcFile =>
                        {
                            var absPath = Path.Combine(Path.GetDirectoryName(project.AbsolutePath), srcFile);                           
                            var source = new SourceFile(absPath);
                            source.Project = new Project(project.ProjectGuid, project.ProjectName, project.AbsolutePath);
                            source.CalculateMetricsWith(analyzers);

                            return source;
                        });
            }).ToList();
        }

      
    }
}
