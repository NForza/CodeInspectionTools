using Microsoft.Build.Construction;
using MSBuild = Microsoft.Build.Evaluation;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.VisualBasic;
using System;
using System.IO;
using System.Linq;
using Inspector.Analyzers;

namespace Inspector
{
    class Program
    {
        private const string csharpSourceFileExtension = ".cs";
        private const string compiled = "Compile";
        private const string autoGenerated = "AutoGen";
        private const string visualBasicSourceFileExtension = ".vb";

        static void Main(string[] args)
        {
            var x = SolutionFile.Parse(args.First());
            x.ProjectsInOrder.ToList().ForEach(project =>
            {
                Console.WriteLine($"{project.ProjectName} = {project.AbsolutePath}");

                var p = new MSBuild.Project(project.AbsolutePath);
                p.Items
                    .Where(i => i.ItemType == compiled && !i.HasMetadata(autoGenerated))
                    .Select(i => i.EvaluatedInclude).ToList()
                        .ForEach(srcFile =>
                        {
                            var absPath = Path.Combine(Path.GetDirectoryName(project.AbsolutePath), srcFile);
                            var lineCount = File.ReadAllLines(absPath).Count();
                            Console.WriteLine($" {srcFile}, {lineCount}");

                            var source = File.OpenText(absPath).ReadToEnd();
                            SyntaxNode sourceFileRootNode = null;
                            if (srcFile.EndsWith(csharpSourceFileExtension))
                            {
                                sourceFileRootNode = CSharpSyntaxTree.ParseText(source).GetRoot();
                            }
                            else if (srcFile.EndsWith(visualBasicSourceFileExtension))
                            {
                                sourceFileRootNode = VisualBasicSyntaxTree.ParseText(source).GetRoot();
                            };

                            var identifier = new VagueToDoComment();
                            foreach (var comment in identifier.GetComments(sourceFileRootNode))
                                Console.WriteLine($"{comment.LineNumber}: {comment.Content}");

                        });
            });

            Console.ReadLine();
        }
    }
}
